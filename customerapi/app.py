# orbital_simulation.py
import streamlit as st
import numpy as np
import plotly.graph_objects as go
import time  # Necesario para la animaci√≥n paso a paso si no usamos frames de Plotly directamente

# --- Configuraci√≥n de la P√°gina ---
st.set_page_config(
    page_title="Simulador de √ìrbitas 3D",
    page_icon="ü™ê",
    layout="wide"
)

# --- T√≠tulo y Descripci√≥n ---
st.title("ü™ê Simulador de √ìrbitas Planetarias 3D")
st.markdown("""
Esta aplicaci√≥n visualiza diferentes tipos de √≥rbitas keplerianas en 3D.
Selecciona un tipo de √≥rbita para ver la animaci√≥n de un planeta alrededor de una estrella central.
La estrella se sit√∫a en uno de los focos de la c√≥nica.
""")

# --- Par√°metros y Selecci√≥n de √ìrbita ---
st.sidebar.header("Configuraci√≥n de la √ìrbita")
orbit_type = st.sidebar.selectbox(
    "Selecciona el tipo de √≥rbita:",
    ["El√≠ptica", "Circular", "Parab√≥lica", "Hiperb√≥lica"]
)

# Definimos par√°metros base para cada √≥rbita (puedes hacerlos interactivos con sliders si quieres)
# 'p' es el semi-latus rectum: p = a(1-e^2) para elipse, p = a(e^2-1) para hip√©rbola
# 'e' es la excentricidad
params = {
    "El√≠ptica": {"e": 0.6, "p": 5.0},
    "Circular": {"e": 0.0, "p": 7.0},  # p = radio para c√≠rculo
    "Parab√≥lica": {"e": 1.0, "p": 5.0}, # p = 2 * distancia perihelio
    "Hiperb√≥lica": {"e": 1.5, "p": 5.0}
}

e = params[orbit_type]["e"]
p = params[orbit_type]["p"]

st.sidebar.write(f"**Par√°metros:**")
st.sidebar.write(f"Excentricidad (e): `{e}`")
st.sidebar.write(f"Semi-latus rectum (p): `{p}`")

# N√∫mero de puntos para la trayectoria completa y para la animaci√≥n
n_points_trajectory = 500
n_points_animation = 150 # Menos puntos para que la animaci√≥n no sea eterna

# --- C√°lculo de la Trayectoria ---

def calcular_coordenadas(e, p, n_points):
    """Calcula las coordenadas (x, y, z=0) de la √≥rbita."""
    if e < 1: # Elipse y C√≠rculo
        theta = np.linspace(0, 2 * np.pi, n_points)
    elif e == 1: # Par√°bola
        # Evitar theta = pi donde r tiende a infinito
        max_angle = np.pi - 0.1 # L√≠mite angular para evitar el infinito
        theta = np.linspace(-max_angle, max_angle, n_points)
    else: # Hip√©rbola
        # El √°ngulo est√° limitado por las as√≠ntotas: cos(theta) > -1/e
        max_angle = np.arccos(-1 / e) - 0.05 # Un poco menos que la as√≠ntota
        theta = np.linspace(-max_angle, max_angle, n_points)

    # F√≥rmula polar de las c√≥nicas (foco en el origen)
    r = p / (1 + e * np.cos(theta))

    # Convertir a coordenadas cartesianas (en el plano z=0)
    x = r * np.cos(theta)
    y = r * np.sin(theta)
    z = np.zeros_like(x) # Mantenemos la √≥rbita en el plano XY

    # Filtrar puntos infinitos o muy lejanos (importante para par√°bola/hip√©rbola)
    mask = np.isfinite(x) & np.isfinite(y) & (np.abs(r) < 50) # Limitar distancia visual
    return x[mask], y[mask], z[mask], theta[mask]

# Calcula las coordenadas para la trayectoria completa y la animaci√≥n
x_traj, y_traj, z_traj, theta_traj = calcular_coordenadas(e, p, n_points_trajectory)
x_anim, y_anim, z_anim, theta_anim = calcular_coordenadas(e, p, n_points_animation)

# --- Creaci√≥n de la Figura 3D con Plotly ---

fig = go.Figure()

# 1. Estrella Central (en el foco, origen)
fig.add_trace(go.Scatter3d(
    x=[0], y=[0], z=[0],
    mode='markers',
    marker=dict(
        size=10,
        color='yellow',
        symbol='circle'
    ),
    name='Estrella'
))

# 2. Trayectoria Completa (l√≠nea gris)
fig.add_trace(go.Scatter3d(
    x=x_traj, y=y_traj, z=z_traj,
    mode='lines',
    line=dict(
        color='grey',
        width=2
    ),
    name='Trayectoria'
))

# 3. Planeta (punto inicial para la animaci√≥n)
fig.add_trace(go.Scatter3d(
    x=[x_anim[0]], y=[y_anim[0]], z=[z_anim[0]], # Posici√≥n inicial
    mode='markers',
    marker=dict(
        size=6,
        color='blue',
        symbol='circle'
    ),
    name='Planeta'
))

# --- Configuraci√≥n de la Animaci√≥n ---
frames = [go.Frame(data=[go.Scatter3d(x=[x_anim[k+1]], y=[y_anim[k+1]], z=[z_anim[k+1]])], # Solo actualiza la posici√≥n del planeta
                   traces=[2], # El √≠ndice de la traza del planeta (0: estrella, 1: trayectoria, 2: planeta)
                   name=f'frame{k}')
          for k in range(n_points_animation)]

fig.frames = frames

# Botones de Play/Pause
updatemenus = [
    dict(
        type='buttons',
        showactive=False,
        buttons=[
            dict(label='Play ‚ñ∂',
                 method='animate',
                 args=[None, dict(frame=dict(duration=50, redraw=True), # Duraci√≥n por frame (ms)
                                  fromcurrent=True,
                                  transition=dict(duration=0)) # Sin transici√≥n suave
                       ]
                 ),
            dict(label='Pause ‚è∏',
                 method='animate',
                 args=[[None], dict(frame=dict(duration=0, redraw=False),
                                    mode='immediate',
                                    transition=dict(duration=0))
                       ]
                 )
        ],
        direction="left",
        pad={"r": 10, "t": 70}, # Ajusta el padding si es necesario
        x=0.1,
        xanchor="right",
        y=0,
        yanchor="top"
    )
]


# --- Configuraci√≥n del Layout del Gr√°fico 3D ---
# Determinar l√≠mites adecuados para los ejes
max_range = max(np.max(np.abs(x_traj)), np.max(np.abs(y_traj)), p) * 1.2
min_range = -max_range

# Manejo especial si la √≥rbita es muy grande o infinita (par√°bola/hip√©rbola)
if not np.isfinite(max_range):
    max_range = 20 # Un valor por defecto razonable
    min_range = -max_range

fig.update_layout(
    scene=dict(
        xaxis=dict(range=[min_range, max_range], autorange=False, title='X (UA)', backgroundcolor="rgb(200, 200, 230)"),
        yaxis=dict(range=[min_range, max_range], autorange=False, title='Y (UA)', backgroundcolor="rgb(230, 200, 230)"),
        zaxis=dict(range=[min_range/2, max_range/2], autorange=False, title='Z (UA)', backgroundcolor="rgb(230, 230, 200)"), # Z m√°s peque√±o
        aspectmode='cube' # Mantiene la proporci√≥n c√∫bica, 'data' ajusta a los datos
    ),
    title=f"Animaci√≥n de √ìrbita {orbit_type}",
    updatemenus=updatemenus, # A√±adir botones de animaci√≥n
    margin=dict(l=0, r=0, b=0, t=40), # Ajustar m√°rgenes
    legend=dict(
        yanchor="top",
        y=0.99,
        xanchor="left",
        x=0.01
    )
)

# --- Mostrar el Gr√°fico en Streamlit ---
st.plotly_chart(fig, use_container_width=True)

# --- Notas Adicionales ---
st.markdown("---")
st.markdown("""
**Notas:**
* La animaci√≥n utiliza un n√∫mero fijo de puntos (`n_points_animation`). La velocidad del planeta no es constante (sigue la segunda ley de Kepler cualitativamente, m√°s r√°pido cerca de la estrella).
* La √≥rbita se mantiene en el plano Z=0 para simplificar.
* Los par√°metros `e` (excentricidad) y `p` (semi-latus rectum) definen la forma y tama√±o de la √≥rbita.
* Para √≥rbitas parab√≥licas e hiperb√≥licas, la trayectoria se extiende al infinito. La visualizaci√≥n est√° limitada a un rango razonable.
""")

# Para ejecutar esta aplicaci√≥n:
# 1. Guarda el c√≥digo como un archivo Python (ej. `orbital_simulation.py`).
# 2. Aseg√∫rate de tener las librer√≠as instaladas: pip install streamlit numpy plotly
# 3. Abre tu terminal y ejecuta: streamlit run orbital_simulation.py